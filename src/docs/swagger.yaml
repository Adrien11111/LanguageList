definitions:
  models.Comment:
    description: Comment model for storing user comments about programming languages.
    properties:
      content:
        example: I love Go for its simplicity and performance.
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Language:
    description: Language model for storing programming languages in the database.
    properties:
      description:
        example: A statically typed, compiled programming language designed for simplicity
          and efficiency.
        type: string
      name:
        example: Go
        type: string
    type: object
  models.RegisterRequest:
    description: User registration request model
    properties:
      email:
        example: adrienpani@gmail.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.User:
    description: User model for storing user information in the database.
    properties:
      email:
        example: adrienpani@gmail.com
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: adrienpani@gmail.com
    name: Adrien Panis
  description: API for managing a list of programming languages.
  title: Language List API
  version: "1.0"
paths:
  /auth/account:
    delete:
      consumes:
      - application/json
      description: Delete the authenticated user's account
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      security:
      - ApiKeyAuth: []
      summary: Delete user account
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return token
      parameters:
      - description: User object with email and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and return success message
      parameters:
      - description: User object with email and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            type: string
        "409":
          description: User already exists
          schema:
            type: string
      summary: User registration
      tags:
      - auth
  /comments:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all comments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "500":
          description: Internal Server Error
      summary: Get all comments
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Add a new comment to the list
      parameters:
      - description: Comment object
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Add a new comment
      tags:
      - comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a comment by ID
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Retrieve a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get a comment by ID
      tags:
      - comments
  /languages:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all programming languages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Language'
            type: array
        "500":
          description: Internal Server Error
      summary: Get all programming languages
      tags:
      - languages
    post:
      consumes:
      - application/json
      description: Add a new programming language to the list
      parameters:
      - description: Language object
        in: body
        name: language
        required: true
        schema:
          $ref: '#/definitions/models.Language'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Language'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Add a new programming language
      tags:
      - languages
  /languages/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a programming language by its ID
      parameters:
      - description: Language ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a programming language by ID
      tags:
      - languages
    get:
      consumes:
      - application/json
      description: Retrieve a programming language by its ID
      parameters:
      - description: Language ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Language'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get a programming language by ID
      tags:
      - languages
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
